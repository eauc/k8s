
* Links

- [[https://kubernetes.io/docs/reference/kubectl/cheatsheet/][kubectl cheatsheet]]

Docker:
- [[https://docs.docker.com/registry/][Registry]]

Kubernetes
- [[https://kubernetes.io/docs/concepts/containers/images/][images]]
- [[https://kubernetes.io/docs/concepts/workloads/pods/][pods]]
- [[https://kubernetes.io/docs/concepts/services-networking/service/][services]]
- [[https://kubernetes.io/docs/concepts/storage/volumes/][volumes]]
- [[https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/][namespaces]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/deployment/][deployments]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/][jobs]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/][statefulsets]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/][daemonsets]]
- [[https://kubernetes.io/docs/concepts/configuration/overview/][configuration best practices]]
- [[https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/][RBAC config]]

KubeAdmin
- [[https://kubernetes.io/docs/setup/independent/install-kubeadm/][installation guide]]
- [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/][create cluster guide]]

Calico pod network provides
- [[https://docs.projectcalico.org/v3.2/getting-started/kubernetes/][getting started]]

[[https://www.linux.com/blog/learn/chapter/Intro-to-Kubernetes/2017/5/set-cicd-pipeline-kubernetes-part-1-overview][CI/CD with kubernetes]]
- [[https://github.com/kenzanlabs/kubernetes-ci-cd][Github repository]]
- [[https://github.com/kubernetes/kubernetes/issues/33664#issuecomment-292895327][Force redeploy with same image tag]]

Packages with Helm
- [[https://docs.helm.sh/using_helm][Using Helm]]
- [[https://docs.helm.sh/using_helm/#installing-helm][Installing Helm]]

Persistent volumes
- [[https://docs.storageos.com/docs/introduction/overview][StorageOS]]

* Installation/configuration notes

  The cluster uses multiple namespaces.

  To run a command in a namespace, _prefix_ the =--namespace= argument= before the command.
  #+BEGIN_SRC sh
  kubectl --namespace=monitoring get pods
  #+END_SRC

  To run a command on all namespaces, _suffix_ the command with the =--all-namespace argument.
  #+BEGIN_SRC sh
  $ kubectl get pods --all-namespaces
NAMESPACE     NAME                                                READY     STATUS    RESTARTS   AGE
default       echoserver-9f757789d-qts8g                          1/1       Running   1          56d
default       mon-compte-ldap2-94ccbf9d6-xsbmr                    1/1       Running   0          37d
ingress       nginx-ingress-controller-7685c4f58b-xgg67           1/1       Running   8          72d
ingress       nginx-ingress-default-backend-544cfb69fc-dvn42      1/1       Running   4          72d
kube-system   calico-etcd-n8bxf                                   1/1       Running   6          72d
kube-system   calico-kube-controllers-65945f849d-nb5n7            1/1       Running   8          72d
  #+END_SRC

  The namespaces at present:
  - default (all CI app pods).
  - ingress (NGinx ingress).
  - kube-system (k8s components).
  - monitoring.

  Only the Admin credentials have access to all namespaces. Dev credential only have access to default.

** VM configuration

- use =VM Network= for network adapter
- use manual MAC adress from =Perimetre d'exploitation= file

Ubuntu 18.04 image
- choose static IPv4 IP from =Perimetre d'exploitation= file

Docker v18 since v17.03 recommended by kudeamin is not found in docker repos.
** Master

UFW config:
- allow ssh from Amaris' public IP
- allow k8s from Amaris' public IP
- allow all from K8sNode
- allow ssh from GitlabRunner
#+BEGIN_SRC bash
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
22                         ALLOW IN    <AmarisPublicIP>
6443                       ALLOW IN    <AmarisPublicIP>
Anywhere                   ALLOW IN    <K8sNode>
22                         ALLOW IN    <GitlabRunner>
#+END_SRC

Docker config:
- disable iptables manipulation, Docker does not respect UFW rules otherwise
- configure json logger rotation, max 10Mo, max 3 files
[[./docker/daemon.json][/etc/docker/daemon.json]]

** Node

UFW config:
- allow all from K8sMaster
- allow dockerResgistry from GitlabRunner
#+BEGIN_SRC bash
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
Anywhere                   ALLOW IN    <K8sMaster>
5000                       ALLOW IN    <GitlabRunner>
#+END_SRC

Docker config:
- disable iptables manipulation, Docker does not respect UFW rules otherwise
#+BEGIN_SRC bash
$ cat /etc/docker/daemon.json
{ "iptables": false }
#+END_SRC

** Kudeadmin

Kubeadmin does not work with swap:
#+BEGIN_SRC bash
swapoff -a
#+END_SRC
- edit =/etc/fstab= to remove swap entry

Kubeadmin install
- followed [[https://kubernetes.io/docs/setup/independent/install-kubeadm/][installation guide]]
- followed [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/][create cluster guide]]

** Calico

- kubeadmin cluster guide and calico getting started differs : the later install an additional etc-d cluster for calico
- followed calico [[https://docs.projectcalico.org/v3.2/getting-started/kubernetes/][getting started]]
#+BEGIN_SRC bash
watch kubectl get pods --all-namespaces
#+END_SRC
- some pods in NodeLost state during setup ???
- all pods running after ~1m

** Helm

- tiller requires roles definitions in the RBAC system, apply [[./helm/rbac-config.yaml][rbac-config]] before helm-init
- then call helm init with the ServiceAccount defined in RBAC config
#+BEGIN_SRC bash
helm init --service-account tiller
#+END_SRC
- if you already installed tiller and want to change this config afterwards:
#+BEGIN_SRC bash
helm init --service-account tiller --upgrade
#+END_SRC

** Prometheus

Prometheus is deployed in the =monitoring= namespace.

- [[https://medium.com/@timfpark/simple-kubernetes-cluster-monitoring-with-prometheus-and-grafana-dd27edb1641][simple tuto]]
- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- create a PV bound to the Prometheus chart PVC's name.

The prometheus UI is not exposed on the cluster, you need to port-forward it on your locahost.
#+BEGIN_SRC sh
$ kubectl --namespace monitoring port-forward svc/prometheus-server 4444:80
#+END_SRC

Deployed with helm chart.

You'll need to had new scrapers definitions in the chart like this :
(TODO: find a way to configure scrapers endpoint with configmaps ?)

#+BEGIN_SRC yaml
rbac:
  create: true
server:
  persistentVolume:
    enabled: true
    size: 8Gi
serverFiles:
  prometheus.yml:
    scrape_configs:
      - job_name: 'mon-compte-admin-master'
        static_configs:
          - targets:
            - mon-compte-admin-master.default:3000
        metrics_path: /monitoring/metrics
#+END_SRC

** Grafana

Grafana is deployed in the =monitoring= namespace.

- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- set rights for user 472:472 on pv directory =/data/grafana= otherwise grafana container dies when it can't create a subdirectory in it's volume :\
- create a PV bound to the Grafana chart PVC's name.

The grafana UI is not exposed on the cluster, you need to port-forward it on your locahost.
#+BEGIN_SRC sh
$ kubectl --namespace monitoring port-forward svc/grafana 4445:80
#+END_SRC

Deployed with helm chart.
#+BEGIN_SRC yaml
rbac:
  create: true
serviceAccount:
  create: true
persistence:
  enabled: true
  size: 10Gi
adminUser: admin
adminPassword: "<strong password>"
#+END_SRC

** Nginx-Ingress

Nginx is deployed in the =ingress= namespace.

The ingress server is bound on the node on port =30080=.

- [[https://medium.com/@maninder.bindra/using-nginx-ingress-controller-to-restrict-access-by-ip-ip-whitelisting-for-a-service-deployed-to-bd5c86dc66d6][whitelisting source ips]]

ConfigMap:
- restrict access to Amaris Public IP
#+BEGIN_SRC yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-ingress
  namespace: ingress
data:
  whitelist-source-range: "<AmarisPublicIP>"
#+END_SRC

** Docker registry

Run a docker registry on KubeNode, with the https certificates provided by =let's encrypt=.
#+BEGIN_SRC bash
docker run -d --restart=always --name registry  -v /data/registry:/var/lib/registry -v /etc/letsencrypt/archive/k8s.amaris.ovh:/certs:ro -e REGISTRY_HTTP_ADDR=0.0.0.0:5443 -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/fullchain1.pem -e REGISTRY_HTTP_TLS_KEY=/certs/privkey1.pem -p 5443:5443 registry:2
#+END_SRC

Access to the registry is retricted by UFW's rules and the fact the Docker's daemon is configured not to inject IPTables, and thus respect the UFW rules.

Hosts wanting to push on the registry should mount a SSH tunnel to KubeNode's port =5000=.
Eg on GitlabRunner:
#+BEGIN_SRC bash
ssh -L 5000:<KubeNodeIP>:5000 localhost
#+END_SRC

** Users

- [[https://kubernetes.io/docs/reference/access-authn-authz/authentication/][authentication in k8s]]
- [[https://kubernetes.io/docs/reference/access-authn-authz/authorization/][autorization in k8s]]
- [[https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/][RBAC configuration]]
- [[https://stackoverflow.com/questions/42170380/how-to-add-users-to-kubernetes-kubectl]]

The last link is the good one:
- create key & CSR for user
- use the cluster's CA (in =/etc/kubernetes/pki/ca.{crt,key}=) to create a certificate for the user
- add the user's context and certificates to kubectl config (for certificate/key, use base64 strings to embed the files content in the config file)
- create the role with the permission in the cluster
- create the rolebinding, associated to user, in the cluster

For persistent volumes, the user need a cluster role. See [[./users/ci-clusterrole.yml]]

* Archi

[[file:schemas/net_access.png]]

#+BEGIN_SRC plantuml :file ./schemas/net_access.png :export none
title k8s cluster network accesses

actor "Dev 92.154.29.210" as Dev
node "Master 145.239.59.98" as Master {
  storage "Kube API https:6443" as Api
  storage "Kube Controller" as Controller
  storage "ssh kube-master" as MasterShell
}
node "Node 145.239.59.100" as Node {
  storage "ssh kube-node" as NodeShell
  storage DockerNode
  storage Kubelet
  cloud Pods
  cloud "Ingress :30080\nwhitelist 92.154.29.210" as Ingress
  database "Docker Registry http:5000" as Registry
}
node "GitlabRunner 145.239.59.109" as GitlabRunner {
  storage Runner
  storage DockerRunner
}

Dev -> MasterShell : ssh :22
MasterShell -> NodeShell : ssh :22

Dev -> Api : https :6443
Api --> Controller
Controller <--> Kubelet : :all
Kubelet --> Pods
Pods --> Registry
Pods ~ DockerNode

DockerRunner ~ Runner
Runner -left-> Api : ssh :22
Runner -> Registry : http/ssh :5000

Dev -> Ingress : http :30080
Ingress --> Pods : http :all
#+END_SRC

* HowTo

** Access a pod server from your machine

Forward local port to push on distant docker registry with HTTP:
#+BEGIN_SRC bash
ssh -L <local-port>:<registry-ip>:<registry-port> <registry-host>
#+END_SRC

Misc
- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- [[https://stackoverflow.com/questions/39293441/needed-ports-for-kubernetes-cluster][ports used by clusters]]
- [[https://github.com/jetstack/kube-lego][kube-lego]]
- [[https://github.com/johanhaleby/kubetail][kubetail]]
- [[https://github.com/dtan4/k8sec][k8sec]]
- [[https://github.com/farmotive/kpoof][kpoof]]

** Find where your app is published

  - read the =deploy.yml= config file in the app repos ! Find the services and ingress defined for your app. If this is not enough:
  - look into the services configuration
    #+BEGIN_SRC bash
    $ kubectl get svc
    NAME                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                       AGE
    echoserver                      ClusterIP   10.108.242.133   <none>        80/TCP                        80d
    kubernetes                      ClusterIP   10.96.0.1        <none>        443/TCP                       80d
    mon-compte-admin-master         ClusterIP   10.101.45.223    <none>        3000/TCP                      79d
    mon-compte-admin-proxy-master   NodePort    10.96.76.162     <none>        443:30447/TCP,444:30444/TCP   76d
    mon-compte-admindb-master       ClusterIP   10.97.134.211    <none>        27017/TCP                     78d
    mon-compte-adminui-master       ClusterIP   10.108.239.193   <none>        80/TCP                        7d
    mon-compte-connector-master     NodePort    10.102.79.5      <none>        7843:30445/TCP                72d
    mon-compte-ldap1                ClusterIP   10.101.53.90     <none>        636/TCP                       73d
    mon-compte-ldap2                ClusterIP   10.107.87.243    <none>        636/TCP                       73d
    #+END_SRC
    -> if your service is a =NodePort= with a direct binding on the machine like =443:30447/TCP= above, you've found your information.
  - otherwise, your app is probably published on ingress on port =30080=. You just need to find your ingress rule:
    #+BEGIN_SRC bash
    $ kubectl get ingress
    NAME                        HOSTS     ADDRESS   PORTS     AGE
    echoserver                  *                   80        80d
    mon-compte-admin-master     *                   80        79d
    mon-compte-adminui-master   *                   80        7d
    #+END_SRC
    once you've found the service for your app, you can ask for its description:
    #+BEGIN_SRC bash
    $ kubectl describe ingress mon-compte-admin-master
    Name:             mon-compte-admin-master
    Namespace:        default
    Address:          
    Default backend:  default-http-backend:80 (<none>)
    Rules:
      Host  Path  Backends
      ----  ----  --------
      ,*     
            /mon-compte-admin/master   mon-compte-admin-master:3000 (<none>)
    #+END_SRC
    So here we can see that the app is accessible on =http://<kube-node>:30080/mon-compte-admin/master= url.
