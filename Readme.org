
* Links

- [[https://kubernetes.io/docs/reference/kubectl/cheatsheet/][kubectl cheatsheet]]

Docker:
- [[https://docs.docker.com/registry/][Registry]]

Kubernetes
- [[https://kubernetes.io/docs/concepts/containers/images/][images]]
- [[https://kubernetes.io/docs/concepts/workloads/pods/][pods]]
- [[https://kubernetes.io/docs/concepts/services-networking/service/][services]]
- [[https://kubernetes.io/docs/concepts/storage/volumes/][volumes]]
- [[https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/][namespaces]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/deployment/][deployments]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/][jobs]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/][statefulsets]]
- [[https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/][daemonsets]]
- [[https://kubernetes.io/docs/concepts/configuration/overview/][configuration best practices]]
- [[https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/][RBAC config]]

KubeAdmin
- [[https://kubernetes.io/docs/setup/independent/install-kubeadm/][installation guide]]
- [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/][create cluster guide]]

Calico pod network provides
- [[https://docs.projectcalico.org/v3.2/getting-started/kubernetes/][getting started]]

[[https://www.linux.com/blog/learn/chapter/Intro-to-Kubernetes/2017/5/set-cicd-pipeline-kubernetes-part-1-overview][CI/CD with kubernetes]]
- [[https://github.com/kenzanlabs/kubernetes-ci-cd][Github repository]]
- [[https://github.com/kubernetes/kubernetes/issues/33664#issuecomment-292895327][Force redeploy with same image tag]]

Packages with Helm
- [[https://docs.helm.sh/using_helm][Using Helm]]
- [[https://docs.helm.sh/using_helm/#installing-helm][Installing Helm]]

Persistent volumes
- [[https://docs.storageos.com/docs/introduction/overview][StorageOS]]

* Installation/configuration notes

** VM configuration

- use =VM Network= for network adapter
- use manual MAC adress from =Perimetre d'exploitation= file

Ubuntu 18.04 image
- choose static IPv4 IP from =Perimetre d'exploitation= file

Docker v18 since v17.03 recommended by kudeamin is not found in docker repos.
** Master

UFW config:
- allow ssh from Amaris' public IP
- allow k8s from Amaris' public IP
- allow all from K8sNode
- allow ssh from GitlabRunner
#+BEGIN_SRC bash
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
22                         ALLOW IN    <AmarisPublicIP>
6443                       ALLOW IN    <AmarisPublicIP>
Anywhere                   ALLOW IN    <K8sNode>
22                         ALLOW IN    <GitlabRunner>
#+END_SRC

Docker config:
- disable iptables manipulation, Docker does not respect UFW rules otherwise
- configure json logger rotation, max 10Mo, max 3 files
[[./docker/daemon.json][/etc/docker/daemon.json]]

** Node

UFW config:
- allow all from K8sMaster
- allow dockerResgistry from GitlabRunner
#+BEGIN_SRC bash
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
Anywhere                   ALLOW IN    <K8sMaster>
5000                       ALLOW IN    <GitlabRunner>
#+END_SRC

Docker config:
- disable iptables manipulation, Docker does not respect UFW rules otherwise
#+BEGIN_SRC bash
$ cat /etc/docker/daemon.json
{ "iptables": false }
#+END_SRC

** Kudeadmin

Kubeadmin does not work with swap:
#+BEGIN_SRC bash
swapoff -a
#+END_SRC
- edit =/etc/fstab= to remove swap entry

Kubeadmin install
- followed [[https://kubernetes.io/docs/setup/independent/install-kubeadm/][installation guide]]
- followed [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/][create cluster guide]]

** Calico

- kubeadmin cluster guide and calico getting started differs : the later install an additional etc-d cluster for calico
- followed calico [[https://docs.projectcalico.org/v3.2/getting-started/kubernetes/][getting started]]
#+BEGIN_SRC bash
watch kubectl get pods --all-namespaces
#+END_SRC
- some pods in NodeLost state during setup ???
- all pods running after ~1m

** Helm

- tiller requires roles definitions in the RBAC system, apply [[./helm/rbac-config.yaml][rbac-config]] before helm-init
- then call helm init with the ServiceAccount defined in RBAC config
#+BEGIN_SRC bash
helm init --service-account tiller
#+END_SRC
- if you already installed tiller and want to change this config afterwards:
#+BEGIN_SRC bash
helm init --service-account tiller --upgrade
#+END_SRC

** Prometheus

- [[https://medium.com/@timfpark/simple-kubernetes-cluster-monitoring-with-prometheus-and-grafana-dd27edb1641][simple tuto]]
- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- create a PV bound to the Prometheus chart PVC's name.

Deployed with helm chart in =monitoring= namespace.
#+BEGIN_SRC yaml
rbac:
  create: true
server:
  persistentVolume:
    enabled: true
    size: 8Gi
serverFiles:
  prometheus.yml:
    scrape_configs:
      - job_name: 'mon-compte-admin-master'
        static_configs:
          - targets:
            - mon-compte-admin-master.default:3000
        metrics_path: /monitoring/metrics
#+END_SRC

** Grafana

- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- set rights for user 472:472 on pv directory =/data/grafana= otherwise grafana container dies when it can't create a subdirectory in it's volume :\
- create a PV bound to the Grafana chart PVC's name.

Deployed with helm chart in =monitoring namespace.
#+BEGIN_SRC yaml
rbac:
  create: true
serviceAccount:
  create: true
persistence:
  enabled: true
  size: 10Gi
adminUser: admin
adminPassword: "<strong password>"
#+END_SRC

** Nginx-Ingress

- [[https://medium.com/@maninder.bindra/using-nginx-ingress-controller-to-restrict-access-by-ip-ip-whitelisting-for-a-service-deployed-to-bd5c86dc66d6][whitelisting source ips]]

ConfigMap:
- restrict access to Amaris Public IP
#+BEGIN_SRC yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-ingress
  namespace: ingress
data:
  whitelist-source-range: "<AmarisPublicIP>"
#+END_SRC

** Docker registry

Run a docker registry on KubeNode.
#+BEGIN_SRC bash
docker run -d   -p 5000:5000   --restart=always   --name registry   -v /data/registry:/var/lib/registry   registry:2
#+END_SRC

Access to the registry is retricted by UFW's rules and the fact the Docker's daemon is configured not to inject IPTables, and thus respect the UFW rules.

Hosts wanting to push on the registry should mount a SSH tunnel to KubeNode's port =5000=.
Eg on GitlabRunner:
#+BEGIN_SRC bash
ssh -L 5000:<KubeNodeIP>:5000 localhost
#+END_SRC

** Users

- [[https://kubernetes.io/docs/reference/access-authn-authz/authentication/][authentication in k8s]]
- [[https://kubernetes.io/docs/reference/access-authn-authz/authorization/][autorization in k8s]]
- [[https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/][RBAC configuration]]
- [[https://stackoverflow.com/questions/42170380/how-to-add-users-to-kubernetes-kubectl]]

The last link is the good one:
- create key & CSR for user
- use the cluster's CA (in =/etc/kubernetes/pki/ca.{crt,key}=) to create a certificate for the user
- add the user's context and certificates to kubectl config (for certificate/key, use base64 strings to embed the files content in the config file)
- create the role with the permission in the cluster
- create the rolebinding, associated to user, in the cluster

For persistent volumes, the user need a cluster role. See [[./users/ci-clusterrole.yml]]

* Archi

#+BEGIN_SRC plantuml :file ./schemas/net_access.png :export results
title k8s cluster network accesses

actor "Dev 92.154.29.210" as Dev
node "Master 145.239.59.98" as Master {
  storage "Kube API https:6443" as Api
  storage "Kube Controller" as Controller
  storage "ssh kube-master" as MasterShell
}
node "Node 145.239.59.100" as Node {
  storage "ssh kube-node" as NodeShell
  storage DockerNode
  storage Kubelet
  cloud Pods
  cloud "Ingress :30080\nwhitelist 92.154.29.210" as Ingress
  database "Docker Registry http:5000" as Registry
}
node "GitlabRunner 145.239.59.109" as GitlabRunner {
  storage Runner
  storage DockerRunner
}

Dev -> MasterShell : ssh :22
MasterShell -> NodeShell : ssh :22

Dev -> Api : https :6443
Api --> Controller
Controller <--> Kubelet : :all
Kubelet --> Pods
Pods --> Registry
Pods ~ DockerNode

DockerRunner ~ Runner
Runner -left-> Api : ssh :22
Runner -> Registry : http/ssh :5000

Dev -> Ingress : http :30080
Ingress --> Pods : http :all
#+END_SRC

#+RESULTS:
[[file:./schemas/net_access.png]]

* Notes

Forward local port to push on distant docker registry with HTTP:
#+BEGIN_SRC bash
ssh -L <local-port>:<registry-ip>:<registry-port> <registry-host>
#+END_SRC

Misc
- [[https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv][bind pv to a specific pvc]]
- [[https://stackoverflow.com/questions/39293441/needed-ports-for-kubernetes-cluster][ports used by clusters]]
- [[https://github.com/jetstack/kube-lego][kube-lego]]
- [[https://github.com/johanhaleby/kubetail][kubetail]]
- [[https://github.com/dtan4/k8sec][k8sec]]
- [[https://github.com/farmotive/kpoof][kpoof]]
